33c1521ed8cbabd48aadd8e017aba231
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Button = void 0;
var _react = _interopRequireDefault(require("react"));
var _utils = require("@/lib/utils");
var _jsxRuntime = require("react/jsx-runtime");
const buttonVariants = {
  primary: 'bg-blue-600 hover:bg-blue-700 text-white border-transparent',
  secondary: 'bg-zinc-700 hover:bg-zinc-600 text-white border-transparent',
  outline: 'bg-transparent border border-zinc-600 text-zinc-300 hover:bg-zinc-800 hover:text-white',
  ghost: 'bg-transparent text-zinc-400 hover:text-white hover:bg-zinc-800'
};
const buttonSizes = {
  sm: 'px-3 py-1.5 text-sm',
  md: 'px-4 py-2 text-sm',
  lg: 'px-6 py-3 text-base'
};
const Button = ({
  variant = 'primary',
  size = 'md',
  disabled = false,
  loading = false,
  onClick,
  className,
  children,
  ...props
}) => {
  const baseClasses = 'inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-zinc-900 disabled:opacity-50 disabled:cursor-not-allowed';
  const classes = (0, _utils.cn)(baseClasses, buttonVariants[variant], buttonSizes[size], className);
  const handleClick = () => {
    if (!disabled && !loading && onClick) {
      onClick();
    }
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("button", {
    className: classes,
    disabled: disabled || loading,
    onClick: handleClick,
    ...props,
    children: [loading && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: "mr-2 animate-spin rounded-full h-4 w-4 border-2 border-current border-t-transparent"
    }), children]
  });
};
exports.Button = Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl91dGlscyIsIl9qc3hSdW50aW1lIiwiYnV0dG9uVmFyaWFudHMiLCJwcmltYXJ5Iiwic2Vjb25kYXJ5Iiwib3V0bGluZSIsImdob3N0IiwiYnV0dG9uU2l6ZXMiLCJzbSIsIm1kIiwibGciLCJCdXR0b24iLCJ2YXJpYW50Iiwic2l6ZSIsImRpc2FibGVkIiwibG9hZGluZyIsIm9uQ2xpY2siLCJjbGFzc05hbWUiLCJjaGlsZHJlbiIsInByb3BzIiwiYmFzZUNsYXNzZXMiLCJjbGFzc2VzIiwiY24iLCJoYW5kbGVDbGljayIsImpzeHMiLCJqc3giLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiYnV0dG9uLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgQnV0dG9uUHJvcHMgfSBmcm9tICdAL3R5cGVzJztcbmltcG9ydCB7IGNuIH0gZnJvbSAnQC9saWIvdXRpbHMnO1xuXG5jb25zdCBidXR0b25WYXJpYW50cyA9IHtcbiAgcHJpbWFyeTogJ2JnLWJsdWUtNjAwIGhvdmVyOmJnLWJsdWUtNzAwIHRleHQtd2hpdGUgYm9yZGVyLXRyYW5zcGFyZW50JyxcbiAgc2Vjb25kYXJ5OiAnYmctemluYy03MDAgaG92ZXI6YmctemluYy02MDAgdGV4dC13aGl0ZSBib3JkZXItdHJhbnNwYXJlbnQnLFxuICBvdXRsaW5lOlxuICAgICdiZy10cmFuc3BhcmVudCBib3JkZXIgYm9yZGVyLXppbmMtNjAwIHRleHQtemluYy0zMDAgaG92ZXI6YmctemluYy04MDAgaG92ZXI6dGV4dC13aGl0ZScsXG4gIGdob3N0OiAnYmctdHJhbnNwYXJlbnQgdGV4dC16aW5jLTQwMCBob3Zlcjp0ZXh0LXdoaXRlIGhvdmVyOmJnLXppbmMtODAwJyxcbn07XG5cbmNvbnN0IGJ1dHRvblNpemVzID0ge1xuICBzbTogJ3B4LTMgcHktMS41IHRleHQtc20nLFxuICBtZDogJ3B4LTQgcHktMiB0ZXh0LXNtJyxcbiAgbGc6ICdweC02IHB5LTMgdGV4dC1iYXNlJyxcbn07XG5cbmV4cG9ydCBjb25zdCBCdXR0b246IFJlYWN0LkZDPEJ1dHRvblByb3BzPiA9ICh7XG4gIHZhcmlhbnQgPSAncHJpbWFyeScsXG4gIHNpemUgPSAnbWQnLFxuICBkaXNhYmxlZCA9IGZhbHNlLFxuICBsb2FkaW5nID0gZmFsc2UsXG4gIG9uQ2xpY2ssXG4gIGNsYXNzTmFtZSxcbiAgY2hpbGRyZW4sXG4gIC4uLnByb3BzXG59KSA9PiB7XG4gIGNvbnN0IGJhc2VDbGFzc2VzID1cbiAgICAnaW5saW5lLWZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIGZvbnQtbWVkaXVtIHJvdW5kZWQtbGcgdHJhbnNpdGlvbi1hbGwgZHVyYXRpb24tMjAwIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTIgZm9jdXM6cmluZy1ibHVlLTUwMCBmb2N1czpyaW5nLW9mZnNldC0yIGZvY3VzOnJpbmctb2Zmc2V0LXppbmMtOTAwIGRpc2FibGVkOm9wYWNpdHktNTAgZGlzYWJsZWQ6Y3Vyc29yLW5vdC1hbGxvd2VkJztcblxuICBjb25zdCBjbGFzc2VzID0gY24oXG4gICAgYmFzZUNsYXNzZXMsXG4gICAgYnV0dG9uVmFyaWFudHNbdmFyaWFudF0sXG4gICAgYnV0dG9uU2l6ZXNbc2l6ZV0sXG4gICAgY2xhc3NOYW1lXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSAoKSA9PiB7XG4gICAgaWYgKCFkaXNhYmxlZCAmJiAhbG9hZGluZyAmJiBvbkNsaWNrKSB7XG4gICAgICBvbkNsaWNrKCk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGJ1dHRvblxuICAgICAgY2xhc3NOYW1lPXtjbGFzc2VzfVxuICAgICAgZGlzYWJsZWQ9e2Rpc2FibGVkIHx8IGxvYWRpbmd9XG4gICAgICBvbkNsaWNrPXtoYW5kbGVDbGlja31cbiAgICAgIHsuLi5wcm9wc31cbiAgICA+XG4gICAgICB7bG9hZGluZyAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPSdtci0yIGFuaW1hdGUtc3BpbiByb3VuZGVkLWZ1bGwgaC00IHctNCBib3JkZXItMiBib3JkZXItY3VycmVudCBib3JkZXItdC10cmFuc3BhcmVudCcgLz5cbiAgICAgICl9XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9idXR0b24+XG4gICk7XG59O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsTUFBQSxHQUFBRCxPQUFBO0FBQWlDLElBQUFFLFdBQUEsR0FBQUYsT0FBQTtBQUVqQyxNQUFNRyxjQUFjLEdBQUc7RUFDckJDLE9BQU8sRUFBRSw2REFBNkQ7RUFDdEVDLFNBQVMsRUFBRSw2REFBNkQ7RUFDeEVDLE9BQU8sRUFDTCx3RkFBd0Y7RUFDMUZDLEtBQUssRUFBRTtBQUNULENBQUM7QUFFRCxNQUFNQyxXQUFXLEdBQUc7RUFDbEJDLEVBQUUsRUFBRSxxQkFBcUI7RUFDekJDLEVBQUUsRUFBRSxtQkFBbUI7RUFDdkJDLEVBQUUsRUFBRTtBQUNOLENBQUM7QUFFTSxNQUFNQyxNQUE2QixHQUFHQSxDQUFDO0VBQzVDQyxPQUFPLEdBQUcsU0FBUztFQUNuQkMsSUFBSSxHQUFHLElBQUk7RUFDWEMsUUFBUSxHQUFHLEtBQUs7RUFDaEJDLE9BQU8sR0FBRyxLQUFLO0VBQ2ZDLE9BQU87RUFDUEMsU0FBUztFQUNUQyxRQUFRO0VBQ1IsR0FBR0M7QUFDTCxDQUFDLEtBQUs7RUFDSixNQUFNQyxXQUFXLEdBQ2YsK09BQStPO0VBRWpQLE1BQU1DLE9BQU8sR0FBRyxJQUFBQyxTQUFFLEVBQ2hCRixXQUFXLEVBQ1hsQixjQUFjLENBQUNVLE9BQU8sQ0FBQyxFQUN2QkwsV0FBVyxDQUFDTSxJQUFJLENBQUMsRUFDakJJLFNBQ0YsQ0FBQztFQUVELE1BQU1NLFdBQVcsR0FBR0EsQ0FBQSxLQUFNO0lBQ3hCLElBQUksQ0FBQ1QsUUFBUSxJQUFJLENBQUNDLE9BQU8sSUFBSUMsT0FBTyxFQUFFO01BQ3BDQSxPQUFPLENBQUMsQ0FBQztJQUNYO0VBQ0YsQ0FBQztFQUVELG9CQUNFLElBQUFmLFdBQUEsQ0FBQXVCLElBQUE7SUFDRVAsU0FBUyxFQUFFSSxPQUFRO0lBQ25CUCxRQUFRLEVBQUVBLFFBQVEsSUFBSUMsT0FBUTtJQUM5QkMsT0FBTyxFQUFFTyxXQUFZO0lBQUEsR0FDakJKLEtBQUs7SUFBQUQsUUFBQSxHQUVSSCxPQUFPLGlCQUNOLElBQUFkLFdBQUEsQ0FBQXdCLEdBQUE7TUFBS1IsU0FBUyxFQUFDO0lBQXFGLENBQUUsQ0FDdkcsRUFDQUMsUUFBUTtFQUFBLENBQ0gsQ0FBQztBQUViLENBQUM7QUFBQ1EsT0FBQSxDQUFBZixNQUFBLEdBQUFBLE1BQUEiLCJpZ25vcmVMaXN0IjpbXX0=