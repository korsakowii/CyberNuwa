b0a5ec3e621677bef42ccca930527590
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cn = cn;
exports.debounce = debounce;
exports.deepClone = deepClone;
exports.formatDate = formatDate;
exports.formatFileSize = formatFileSize;
exports.formatNumber = formatNumber;
exports.formatTime = formatTime;
exports.generateId = generateId;
exports.isEmpty = isEmpty;
exports.safeJsonParse = safeJsonParse;
exports.throttle = throttle;
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _clsx = require("clsx");
var _tailwindMerge = require("tailwind-merge");
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { (0, _defineProperty2.default)(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
// 合并CSS类名，处理Tailwind CSS冲突
function cn(...inputs) {
  return (0, _tailwindMerge.twMerge)((0, _clsx.clsx)(inputs));
}

// 防抖函数
function debounce(func, wait) {
  let timeout;
  return (...args) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func(...args), wait);
  };
}

// 节流函数
function throttle(func, limit) {
  let inThrottle;
  return (...args) => {
    if (!inThrottle) {
      func(...args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  };
}

// 格式化日期
function formatDate(date, options) {
  const dateObj = typeof date === 'string' ? new Date(date) : date;
  const defaultOptions = _objectSpread({
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  }, options);
  return dateObj.toLocaleDateString(undefined, defaultOptions);
}

// 格式化时间
function formatTime(date) {
  const dateObj = typeof date === 'string' ? new Date(date) : date;
  return dateObj.toLocaleTimeString(undefined, {
    hour: '2-digit',
    minute: '2-digit'
  });
}

// 生成唯一ID
function generateId() {
  return Math.random().toString(36).substr(2, 9);
}

// 深度克隆对象
function deepClone(obj) {
  if (obj === null || typeof obj !== 'object') {
    return obj;
  }
  if (obj instanceof Date) {
    return new Date(obj.getTime());
  }
  if (obj instanceof Array) {
    return obj.map(item => deepClone(item));
  }
  if (typeof obj === 'object') {
    const clonedObj = {};
    for (const key in obj) {
      if (obj.hasOwnProperty(key)) {
        clonedObj[key] = deepClone(obj[key]);
      }
    }
    return clonedObj;
  }
  return obj;
}

// 检查对象是否为空
function isEmpty(obj) {
  if (obj === null) {
    return true;
  }
  if (Array.isArray(obj) || typeof obj === 'string') {
    return obj.length === 0;
  }
  if (obj instanceof Map || obj instanceof Set) {
    return obj.size === 0;
  }
  if (typeof obj === 'object') {
    return Object.keys(obj).length === 0;
  }
  return false;
}

// 安全的JSON解析
function safeJsonParse(json, fallback) {
  try {
    return JSON.parse(json);
  } catch {
    return fallback;
  }
}

// 数字格式化
function formatNumber(num, options) {
  const defaultOptions = _objectSpread({
    maximumFractionDigits: 2
  }, options);
  return new Intl.NumberFormat(undefined, defaultOptions).format(num);
}

// 文件大小格式化
function formatFileSize(bytes) {
  if (bytes === 0) {
    return '0 Bytes';
  }
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,