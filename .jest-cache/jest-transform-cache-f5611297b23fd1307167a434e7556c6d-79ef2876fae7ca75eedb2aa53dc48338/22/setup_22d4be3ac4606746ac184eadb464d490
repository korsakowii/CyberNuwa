8e609d11f972836d0a3c261e4a4824fb
"use strict";

// 模拟静态资源
_getJestObj().mock('*.css', () => ({}));
_getJestObj().mock('*.scss', () => ({}));
_getJestObj().mock('*.sass', () => ({}));
_getJestObj().mock('*.less', () => ({}));

// 模拟图片文件
_getJestObj().mock('*.png', () => 'mocked-png');
_getJestObj().mock('*.jpg', () => 'mocked-jpg');
_getJestObj().mock('*.jpeg', () => 'mocked-jpeg');
_getJestObj().mock('*.gif', () => 'mocked-gif');
_getJestObj().mock('*.svg', () => 'mocked-svg');
_getJestObj().mock('*.webp', () => 'mocked-webp');

// 模拟字体文件
_getJestObj().mock('*.woff', () => 'mocked-woff');
_getJestObj().mock('*.woff2', () => 'mocked-woff2');
_getJestObj().mock('*.ttf', () => 'mocked-ttf');
_getJestObj().mock('*.eot', () => 'mocked-eot');
_getJestObj().mock('*.otf', () => 'mocked-otf');

// 模拟音频和视频文件
_getJestObj().mock('*.mp3', () => 'mocked-mp3');
_getJestObj().mock('*.m4a', () => 'mocked-m4a');
_getJestObj().mock('*.aac', () => 'mocked-aac');
_getJestObj().mock('*.oga', () => 'mocked-oga');
_getJestObj().mock('*.mp4', () => 'mocked-mp4');
_getJestObj().mock('*.webm', () => 'mocked-webm');
_getJestObj().mock('*.wav', () => 'mocked-wav');

// 设置环境变量
require("@testing-library/jest-dom");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
// 模拟浏览器API
Object.defineProperty(window, 'matchMedia', {
  writable: true,
  value: jest.fn().mockImplementation(query => ({
    matches: false,
    media: query,
    onchange: null,
    addListener: jest.fn(),
    // deprecated
    removeListener: jest.fn(),
    // deprecated
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
    dispatchEvent: jest.fn()
  }))
});

// 模拟 ResizeObserver
global.ResizeObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn()
}));

// 模拟 IntersectionObserver
global.IntersectionObserver = jest.fn().mockImplementation(() => ({
  observe: jest.fn(),
  unobserve: jest.fn(),
  disconnect: jest.fn()
}));

// 模拟 getComputedStyle
Object.defineProperty(window, 'getComputedStyle', {
  value: () => ({
    getPropertyValue: () => ''
  })
});

// 模拟 scrollTo
Object.defineProperty(window, 'scrollTo', {
  value: jest.fn()
});

// 自定义 Jest 匹配器
expect.extend({
  toHaveClass(received, className) {
    const pass = received.classList.contains(className);
    if (pass) {
      return {
        message: () => `expected element not to have class ${className}`,
        pass: true
      };
    } else {
      return {
        message: () => `expected element to have class ${className}`,
        pass: false
      };
    }
  },
  toHaveStyle(received, style) {
    const pass = received.getAttribute('style')?.includes(style) || false;
    if (pass) {
      return {
        message: () => `expected element not to have style ${style}`,
        pass: true
      };
    } else {
      return {
        message: () => `expected element to have style ${style}`,
        pass: false
      };
    }
  }
});
process.env.NEXT_PUBLIC_API_URL = 'http://localhost:3000/api';
process.env.NEXT_PUBLIC_APP_NAME = 'CyberNuwa Test';

// 全局测试设置
beforeAll(() => {
  // 设置测试环境
  console.log('Setting up test environment...');
});
afterEach(() => {
  // 清理测试
  jest.clearAllMocks();
});
afterAll(() => {
  // 清理测试环境
  console.log('Cleaning up test environment...');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,