337eacf9ff76445755f4f98cbf84092e
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TabsTrigger = exports.TabsTab = exports.TabsRoot = exports.TabsPanel = exports.TabsList = exports.TabsGroup = exports.TabsContent = exports.Tabs = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../lib/utils");
const _excluded = ["value", "disabled", "className", "children"],
  _excluded2 = ["value", "className", "children"];
var _jsxFileName = "/Users/yanxiaoyu/projects/CyberNuwa/components/ui/tabs.tsx";
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
var __jsx = _react.default.createElement;
// 类型定义

// Context
const TabsContext = /*#__PURE__*/(0, _react.createContext)(undefined);
const useTabsContext = () => {
  const context = (0, _react.useContext)(TabsContext);
  if (!context) {
    throw new Error('Tabs components must be used within a Tabs component');
  }
  return context;
};

// 主组件
const Tabs = ({
  value,
  defaultValue,
  onValueChange,
  orientation = 'horizontal',
  className,
  children
}) => {
  const {
    0: internalValue,
    1: setInternalValue
  } = (0, _react.useState)(defaultValue || '');
  const controlledValue = value !== undefined ? value : internalValue;
  const activeTab = controlledValue || _react.default.Children.toArray(children)[0]?.props?.value || '';
  const setActiveTab = newValue => {
    if (value === undefined) {
      setInternalValue(newValue);
    }
    onValueChange?.(newValue);
  };
  return __jsx(TabsContext.Provider, {
    value: {
      activeTab,
      setActiveTab,
      orientation
    },
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 76,
      columnNumber: 5
    }
  }, __jsx("div", {
    className: (0, _utils.cn)('w-full', className),
    "data-testid": "tabs-root",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 77,
      columnNumber: 7
    }
  }, children));
};

// TabsList 组件
exports.Tabs = Tabs;
const TabsList = ({
  className,
  children
}) => {
  const {
    orientation
  } = useTabsContext();
  return __jsx("div", {
    className: (0, _utils.cn)('inline-flex h-10 items-center justify-center rounded-md bg-gray-100 p-1 text-gray-500', orientation === 'vertical' && 'flex-col h-auto w-40', className),
    role: "tablist",
    "aria-orientation": orientation,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 89,
      columnNumber: 5
    }
  }, children);
};

// TabsTrigger 组件
exports.TabsList = TabsList;
const TabsTrigger = _ref => {
  let {
      value,
      disabled = false,
      className,
      children
    } = _ref,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const {
    activeTab,
    setActiveTab,
    orientation
  } = useTabsContext();
  const isActive = activeTab === value;
  const handleKeyDown = event => {
    if (disabled) return;

    // 获取所有标签页的值
    const tabValues = [];
    const tabElements = event.currentTarget.parentElement?.querySelectorAll('[role="tab"]');
    if (tabElements) {
      tabElements.forEach(tab => {
        const tabValue = tab.getAttribute('data-value') || tab.getAttribute('value');
        if (tabValue && typeof tabValue === 'string') tabValues.push(tabValue);
      });
    }
    const currentIndex = tabValues.indexOf(value);
    let nextValue = value;
    switch (event.key) {
      case 'ArrowRight':
      case 'ArrowDown':
        event.preventDefault();
        if (currentIndex < tabValues.length - 1) {
          const nextTabValue = tabValues[currentIndex + 1];
          if (nextTabValue) nextValue = nextTabValue;
        }
        break;
      case 'ArrowLeft':
      case 'ArrowUp':
        event.preventDefault();
        if (currentIndex > 0) {
          const prevTabValue = tabValues[currentIndex - 1];
          if (prevTabValue) nextValue = prevTabValue;
        }
        break;
      case 'Enter':
      case ' ':
        event.preventDefault();
        setActiveTab(value);
        return;
    }
    if (nextValue !== value) {
      setActiveTab(nextValue);
    }
  };
  return __jsx("button", (0, _extends2.default)({
    className: (0, _utils.cn)('inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-white transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-400 focus-visible:ring-offset-2', isActive ? 'bg-white text-gray-950 shadow-sm' : 'text-gray-600 hover:text-gray-950', disabled && 'pointer-events-none opacity-50', orientation === 'vertical' && 'w-full justify-start', className),
    disabled: disabled,
    onClick: () => setActiveTab(value),
    onKeyDown: handleKeyDown,
    role: "tab",
    "aria-selected": isActive,
    "data-state": isActive ? 'active' : 'inactive',
    "data-value": value
  }, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 160,
      columnNumber: 5
    }
  }), children);
};

// TabsContent 组件
exports.TabsTrigger = TabsTrigger;
const TabsContent = _ref2 => {
  let {
      value,
      className,
      children
    } = _ref2,
    props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
  const {
    activeTab
  } = useTabsContext();
  const isActive = activeTab === value;
  return __jsx("div", (0, _extends2.default)({
    className: (0, _utils.cn)('mt-2 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-400 focus-visible:ring-offset-2', !isActive && 'hidden', className),
    role: "tabpanel",
    "data-state": isActive ? 'active' : 'inactive',
    "data-testid": `${value}-content`
  }, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 195,
      columnNumber: 5
    }
  }), children);
};

// TabsGroup 组件
exports.TabsContent = TabsContent;
const TabsGroup = ({
  label,
  className,
  children
}) => {
  const {
    orientation
  } = useTabsContext();
  return __jsx("div", {
    className: (0, _utils.cn)(orientation === 'vertical' ? 'mb-4' : 'space-y-4', className),
    "data-testid": "tabs-group",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 220,
      columnNumber: 5
    }
  }, label && __jsx("h3", {
    className: "mb-2 text-sm font-medium text-gray-700",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 225,
      columnNumber: 9
    }
  }, label), __jsx("div", {
    className: (0, _utils.cn)(orientation === 'horizontal' ? 'flex space-x-4 space-y-0' : 'flex flex-col space-y-4 space-x-0'),
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 227,
      columnNumber: 7
    }
  }, children));
};

// 组合组件
exports.TabsGroup = TabsGroup;
const TabsRoot = exports.TabsRoot = Tabs;
const TabsTab = exports.TabsTab = TabsTrigger;
const TabsPanel = exports.TabsPanel = TabsContent;

// 默认导出
var _default = exports.default = Tabs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,