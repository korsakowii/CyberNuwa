bc7324072c3593208140e697c62924ab
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _react = _interopRequireDefault(require("react"));
var _react2 = require("@testing-library/react");
var _Button = require("@/components/ui/Button");
var _jsxFileName = "/Users/yanxiaoyu/projects/CyberNuwa/tests/components/Button.test.tsx";
var __jsx = _react.default.createElement;
describe('Button', () => {
  it('renders with default props', () => {
    (0, _react2.render)(__jsx(_Button.Button, {
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 7,
        columnNumber: 12
      }
    }, "Click me"));
    expect(_react2.screen.getByRole('button', {
      name: /click me/i
    })).toBeInTheDocument();
  });
  it('renders with different variants', () => {
    const {
      rerender
    } = (0, _react2.render)(__jsx(_Button.Button, {
      variant: "primary",
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 14,
        columnNumber: 33
      }
    }, "Primary"));
    expect(_react2.screen.getByRole('button')).toHaveClass('bg-blue-600');
    rerender(__jsx(_Button.Button, {
      variant: "secondary",
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 17,
        columnNumber: 14
      }
    }, "Secondary"));
    expect(_react2.screen.getByRole('button')).toHaveClass('bg-zinc-700');
    rerender(__jsx(_Button.Button, {
      variant: "outline",
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 20,
        columnNumber: 14
      }
    }, "Outline"));
    expect(_react2.screen.getByRole('button')).toHaveClass('bg-transparent');
    rerender(__jsx(_Button.Button, {
      variant: "ghost",
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 23,
        columnNumber: 14
      }
    }, "Ghost"));
    expect(_react2.screen.getByRole('button')).toHaveClass('bg-transparent');
  });
  it('renders with different sizes', () => {
    const {
      rerender
    } = (0, _react2.render)(__jsx(_Button.Button, {
      size: "sm",
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 28,
        columnNumber: 33
      }
    }, "Small"));
    expect(_react2.screen.getByRole('button')).toHaveClass('px-3 py-1.5');
    rerender(__jsx(_Button.Button, {
      size: "md",
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 31,
        columnNumber: 14
      }
    }, "Medium"));
    expect(_react2.screen.getByRole('button')).toHaveClass('px-4 py-2');
    rerender(__jsx(_Button.Button, {
      size: "lg",
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 34,
        columnNumber: 14
      }
    }, "Large"));
    expect(_react2.screen.getByRole('button')).toHaveClass('px-6 py-3');
  });
  it('shows loading state', () => {
    (0, _react2.render)(__jsx(_Button.Button, {
      loading: true,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 39,
        columnNumber: 12
      }
    }, "Loading"));
    expect(_react2.screen.getByRole('button')).toBeDisabled();
    expect(_react2.screen.getByRole('button')).toHaveClass('opacity-50');
  });
  it('handles click events', () => {
    const handleClick = jest.fn();
    (0, _react2.render)(__jsx(_Button.Button, {
      onClick: handleClick,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 46,
        columnNumber: 12
      }
    }, "Click me"));
    _react2.fireEvent.click(_react2.screen.getByRole('button'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
  it('does not call onClick when disabled', () => {
    const handleClick = jest.fn();
    (0, _react2.render)(__jsx(_Button.Button, {
      onClick: handleClick,
      disabled: true,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 55,
        columnNumber: 7
      }
    }, "Disabled"));
    _react2.fireEvent.click(_react2.screen.getByRole('button'));
    expect(handleClick).not.toHaveBeenCalled();
  });
  it('does not call onClick when loading', () => {
    const handleClick = jest.fn();
    (0, _react2.render)(__jsx(_Button.Button, {
      onClick: handleClick,
      loading: true,
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 67,
        columnNumber: 7
      }
    }, "Loading"));
    _react2.fireEvent.click(_react2.screen.getByRole('button'));
    expect(handleClick).not.toHaveBeenCalled();
  });
  it('applies custom className', () => {
    (0, _react2.render)(__jsx(_Button.Button, {
      className: "custom-class",
      __self: void 0,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 77,
        columnNumber: 12
      }
    }, "Custom"));
    expect(_react2.screen.getByRole('button')).toHaveClass('custom-class');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,