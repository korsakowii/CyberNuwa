b308bb3d9f9e2a5f806a71a5e4fa60c2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Pagination = void 0;
var _react = _interopRequireDefault(require("react"));
var _utils = require("../../lib/utils");
var _button = require("./button");
var _jsxFileName = "/Users/yanxiaoyu/projects/CyberNuwa/components/ui/pagination.tsx";
var __jsx = _react.default.createElement;
// 分页信息接口

// 分页组件属性

// 分页按钮组件

const PaginationButton = ({
  onClick,
  disabled = false,
  active = false,
  children,
  className
}) => __jsx(_button.Button, {
  variant: active ? 'primary' : 'outline',
  size: "sm",
  onClick: onClick,
  disabled: disabled,
  className: (0, _utils.cn)('min-w-[40px] h-10 px-3', active && 'bg-primary text-primary-foreground', className),
  __self: void 0,
  __source: {
    fileName: _jsxFileName,
    lineNumber: 43,
    columnNumber: 3
  }
}, children);

// 主分页组件
const Pagination = ({
  info,
  onPageChange,
  onItemsPerPageChange,
  className,
  showItemsPerPage = true,
  itemsPerPageOptions = [10, 20, 50, 100],
  showTotal = true,
  showPageInfo = true
}) => {
  const {
    currentPage,
    totalPages,
    totalItems,
    itemsPerPage,
    hasNextPage,
    hasPreviousPage
  } = info;

  // 生成页码数组
  const getPageNumbers = () => {
    const pages = [];
    const maxVisiblePages = 7;
    if (totalPages <= maxVisiblePages) {
      // 如果总页数少于等于最大可见页数，显示所有页码
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      // 否则显示部分页码，包含省略号
      if (currentPage <= 4) {
        // 当前页在前4页
        for (let i = 1; i <= 5; i++) {
          pages.push(i);
        }
        pages.push('...');
        pages.push(totalPages);
      } else if (currentPage >= totalPages - 3) {
        // 当前页在后4页
        pages.push(1);
        pages.push('...');
        for (let i = totalPages - 4; i <= totalPages; i++) {
          pages.push(i);
        }
      } else {
        // 当前页在中间
        pages.push(1);
        pages.push('...');
        for (let i = currentPage - 1; i <= currentPage + 1; i++) {
          pages.push(i);
        }
        pages.push('...');
        pages.push(totalPages);
      }
    }
    return pages;
  };
  const pageNumbers = getPageNumbers();
  return __jsx("div", {
    className: (0, _utils.cn)('flex flex-col sm:flex-row items-center justify-between gap-4', className),
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 115,
      columnNumber: 5
    }
  }, __jsx("div", {
    className: "flex items-center gap-4",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 117,
      columnNumber: 7
    }
  }, showTotal && __jsx("div", {
    className: "text-sm text-gray-600",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 119,
      columnNumber: 11
    }
  }, "\u5171 ", totalItems, " \u6761\u8BB0\u5F55"), showItemsPerPage && onItemsPerPageChange && __jsx("div", {
    className: "flex items-center gap-2",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 125,
      columnNumber: 11
    }
  }, __jsx("span", {
    className: "text-sm text-gray-600",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 126,
      columnNumber: 13
    }
  }, "\u6BCF\u9875"), __jsx("select", {
    value: itemsPerPage,
    onChange: e => onItemsPerPageChange(Number(e.target.value)),
    className: "border border-gray-300 rounded-md px-2 py-1 text-sm",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 127,
      columnNumber: 13
    }
  }, itemsPerPageOptions.map(option => __jsx("option", {
    key: option,
    value: option,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 133,
      columnNumber: 17
    }
  }, option))), __jsx("span", {
    className: "text-sm text-gray-600",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 138,
      columnNumber: 13
    }
  }, "\u6761"))), totalPages > 1 && __jsx("div", {
    className: "flex items-center gap-1",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 145,
      columnNumber: 9
    }
  }, __jsx(PaginationButton, {
    onClick: () => onPageChange(currentPage - 1),
    disabled: !hasPreviousPage,
    className: "mr-2",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 147,
      columnNumber: 11
    }
  }, "\u4E0A\u4E00\u9875"), pageNumbers.map((page, index) => __jsx(_react.default.Fragment, {
    key: index,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 157,
      columnNumber: 13
    }
  }, page === '...' ? __jsx("span", {
    key: `ellipsis-${index}`,
    className: "px-3 py-2 text-gray-500",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 159,
      columnNumber: 17
    }
  }, "...") : __jsx(PaginationButton, {
    onClick: () => onPageChange(page),
    active: page === currentPage,
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 161,
      columnNumber: 17
    }
  }, page))), __jsx(PaginationButton, {
    onClick: () => onPageChange(currentPage + 1),
    disabled: !hasNextPage,
    className: "ml-2",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 172,
      columnNumber: 11
    }
  }, "\u4E0B\u4E00\u9875")), showPageInfo && __jsx("div", {
    className: "text-sm text-gray-600",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 184,
      columnNumber: 9
    }
  }, "\u7B2C ", currentPage, " \u9875\uFF0C\u5171 ", totalPages, " \u9875"));
};

// 默认导出
exports.Pagination = Pagination;
var _default = exports.default = Pagination;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,