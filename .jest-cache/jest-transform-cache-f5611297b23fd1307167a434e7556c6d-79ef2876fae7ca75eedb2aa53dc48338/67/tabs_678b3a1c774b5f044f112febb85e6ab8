482c5be373ff6f1478663eb670c26d08
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TabsTrigger = exports.TabsTab = exports.TabsRoot = exports.TabsPanel = exports.TabsList = exports.TabsGroup = exports.TabsContent = exports.Tabs = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../lib/utils");
const _excluded = ["className"],
  _excluded2 = ["value", "disabled", "className", "children"],
  _excluded3 = ["value", "className", "children"];
var _jsxFileName = "/Users/yanxiaoyu/projects/CyberNuwa/components/ui/tabs.tsx";
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
var __jsx = _react.default.createElement;
// 标签页上下文

const TabsContext = /*#__PURE__*/(0, _react.createContext)(undefined);

// 使用标签页上下文
const useTabsContext = () => {
  const context = (0, _react.useContext)(TabsContext);
  if (!context) {
    throw new Error('Tabs components must be used within a Tabs container');
  }
  return context;
};

// 标签页容器属性

// 标签页容器
const Tabs = ({
  defaultValue,
  value,
  onValueChange,
  orientation = 'horizontal',
  className,
  children
}) => {
  const {
    0: internalValue,
    1: setInternalValue
  } = (0, _react.useState)(defaultValue || '');
  const activeTab = value !== undefined ? value : internalValue;
  const setActiveTab = id => {
    if (value === undefined) {
      setInternalValue(id);
    }
    onValueChange?.(id);
  };
  return __jsx(TabsContext.Provider, {
    value: {
      activeTab,
      setActiveTab,
      orientation
    },
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 52,
      columnNumber: 5
    }
  }, __jsx("div", {
    className: (0, _utils.cn)('w-full', orientation === 'vertical' ? 'flex' : 'block', className),
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 53,
      columnNumber: 7
    }
  }, children));
};

// 标签页列表属性
exports.Tabs = Tabs;
// 标签页列表
const TabsList = _ref => {
  let {
      className
    } = _ref,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const {
    orientation
  } = useTabsContext();
  return __jsx("div", (0, _extends2.default)({
    className: (0, _utils.cn)('inline-flex h-10 items-center justify-center rounded-md bg-gray-100 p-1 text-gray-500', orientation === 'vertical' && 'flex-col h-auto w-40', className)
  }, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 74,
      columnNumber: 5
    }
  }));
};

// 标签页触发器属性
exports.TabsList = TabsList;
// 标签页触发器
const TabsTrigger = _ref2 => {
  let {
      value,
      disabled = false,
      className,
      children
    } = _ref2,
    props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
  const {
    activeTab,
    setActiveTab,
    orientation
  } = useTabsContext();
  const isActive = activeTab === value;
  return __jsx("button", (0, _extends2.default)({
    className: (0, _utils.cn)('inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-white transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-400 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50', isActive ? 'bg-white text-gray-950 shadow-sm' : 'text-gray-600 hover:text-gray-950', orientation === 'vertical' && 'w-full justify-start', className),
    disabled: disabled,
    onClick: () => setActiveTab(value)
  }, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 103,
      columnNumber: 5
    }
  }), children);
};

// 标签页内容属性
exports.TabsTrigger = TabsTrigger;
// 标签页内容
const TabsContent = _ref3 => {
  let {
      value,
      className,
      children
    } = _ref3,
    props = (0, _objectWithoutProperties2.default)(_ref3, _excluded3);
  const {
    activeTab,
    orientation
  } = useTabsContext();
  const isActive = activeTab === value;
  if (!isActive) return null;
  return __jsx("div", (0, _extends2.default)({
    className: (0, _utils.cn)('mt-2 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-400 focus-visible:ring-offset-2', orientation === 'vertical' && 'ml-4 mt-0', className)
  }, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 139,
      columnNumber: 5
    }
  }), children);
};

// 标签页组属性
exports.TabsContent = TabsContent;
// 标签页组（用于垂直布局中的分组）
const TabsGroup = ({
  label,
  children,
  className
}) => {
  return __jsx("div", {
    className: (0, _utils.cn)('mb-4', className),
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 166,
      columnNumber: 5
    }
  }, label && __jsx("h3", {
    className: "mb-2 text-sm font-medium text-gray-700",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 168,
      columnNumber: 9
    }
  }, label), children);
};

// 组合组件
exports.TabsGroup = TabsGroup;
const TabsRoot = exports.TabsRoot = Tabs;
const TabsTab = exports.TabsTab = TabsTrigger;
const TabsPanel = exports.TabsPanel = TabsContent;

// 默认导出
var _default = exports.default = Tabs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,