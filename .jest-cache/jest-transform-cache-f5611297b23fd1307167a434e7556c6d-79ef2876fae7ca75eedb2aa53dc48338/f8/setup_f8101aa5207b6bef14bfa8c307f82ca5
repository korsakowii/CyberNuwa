7c215051be4519f5455a1eac62439907
"use strict";

// 模拟CSS模块
_getJestObj().mock('*.module.css', () => ({}));
_getJestObj().mock('*.module.scss', () => ({}));
_getJestObj().mock('*.module.sass', () => ({}));

// 模拟图片和静态资源
_getJestObj().mock('*.png', () => 'mocked-png');
_getJestObj().mock('*.jpg', () => 'mocked-jpg');
_getJestObj().mock('*.jpeg', () => 'mocked-jpeg');
_getJestObj().mock('*.gif', () => 'mocked-gif');
_getJestObj().mock('*.svg', () => 'mocked-svg');
_getJestObj().mock('*.ico', () => 'mocked-ico');
_getJestObj().mock('*.webp', () => 'mocked-webp');

// 模拟字体文件
_getJestObj().mock('*.woff', () => 'mocked-woff');
_getJestObj().mock('*.woff2', () => 'mocked-woff2');
_getJestObj().mock('*.ttf', () => 'mocked-ttf');
_getJestObj().mock('*.eot', () => 'mocked-eot');

// 模拟音频和视频文件
_getJestObj().mock('*.mp3', () => 'mocked-mp3');
_getJestObj().mock('*.wav', () => 'mocked-wav');
_getJestObj().mock('*.mp4', () => 'mocked-mp4');
_getJestObj().mock('*.webm', () => 'mocked-webm');

// 模拟JSON文件
_getJestObj().mock('*.json', () => ({}));

// 模拟环境变量
require("@testing-library/jest-dom");
function _getJestObj() {
  const {
    jest
  } = require("@jest/globals");
  _getJestObj = () => jest;
  return jest;
}
// 全局测试设置
beforeAll(() => {
  // 设置测试环境变量
  process.env.NODE_ENV = 'test';

  // 模拟浏览器API
  Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation(query => ({
      matches: false,
      media: query,
      onchange: null,
      addListener: jest.fn(),
      // deprecated
      removeListener: jest.fn(),
      // deprecated
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      dispatchEvent: jest.fn()
    }))
  });

  // 模拟ResizeObserver
  global.ResizeObserver = jest.fn().mockImplementation(() => ({
    observe: jest.fn(),
    unobserve: jest.fn(),
    disconnect: jest.fn()
  }));

  // 模拟IntersectionObserver
  global.IntersectionObserver = jest.fn().mockImplementation(() => ({
    observe: jest.fn(),
    unobserve: jest.fn(),
    disconnect: jest.fn()
  }));

  // 模拟getComputedStyle
  Object.defineProperty(window, 'getComputedStyle', {
    value: () => ({
      getPropertyValue: () => ''
    })
  });

  // 模拟scrollTo
  window.scrollTo = jest.fn();

  // 模拟console方法（可选，用于调试）
  // global.console = {
  //   ...console,
  //   warn: jest.fn(),
  //   error: jest.fn(),
  // };
});
afterEach(() => {
  // 清理DOM
  document.body.innerHTML = '';

  // 清理所有模拟
  jest.clearAllMocks();

  // 清理localStorage和sessionStorage
  localStorage.clear();
  sessionStorage.clear();
});
afterAll(() => {
  // 清理测试环境
  jest.restoreAllMocks();
});

// 自定义匹配器
expect.extend({
  toHaveClass(received, ...expectedClasses) {
    const pass = expectedClasses.every(className => received.classList.contains(className));
    if (pass) {
      return {
        message: () => `expected element not to have classes: ${expectedClasses.join(', ')}`,
        pass: true
      };
    } else {
      return {
        message: () => `expected element to have classes: ${expectedClasses.join(', ')}`,
        pass: false
      };
    }
  },
  toHaveStyle(received, expectedStyles) {
    const computedStyles = window.getComputedStyle(received);
    const pass = Object.entries(expectedStyles).every(([property, value]) => computedStyles.getPropertyValue(property) === value);
    if (pass) {
      return {
        message: () => `expected element not to have styles: ${JSON.stringify(expectedStyles)}`,
        pass: true
      };
    } else {
      return {
        message: () => `expected element to have styles: ${JSON.stringify(expectedStyles)}`,
        pass: false
      };
    }
  }
});

// 扩展全局类型
process.env.NEXT_PUBLIC_API_URL = 'http://localhost:3000/api';
process.env.NEXT_PUBLIC_APP_NAME = 'CyberNuwa Test';
//# sourceMappingURL=data:application/json;charset=utf-8;base64,