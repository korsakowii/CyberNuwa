212f785b1c1826c26149230e9145b295
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TableRow = exports.TableHeader = exports.TableHead = exports.TableFooter = exports.TableCell = exports.TableCaption = exports.TableBody = exports.Table = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireDefault(require("react"));
var _utils = require("../../lib/utils");
const _excluded = ["className", "variant"],
  _excluded2 = ["className"],
  _excluded3 = ["className"],
  _excluded4 = ["className", "hover", "selected"],
  _excluded5 = ["className", "sortable", "sortDirection", "onSort", "children"],
  _excluded6 = ["className", "align"],
  _excluded7 = ["className"],
  _excluded8 = ["className"];
var _jsxFileName = "/Users/yanxiaoyu/projects/CyberNuwa/components/ui/table.tsx";
var __jsx = _react.default.createElement;
// Table 容器

const Table = exports.Table = /*#__PURE__*/_react.default.forwardRef((_ref, ref) => {
  let {
      className,
      variant = 'default'
    } = _ref,
    props = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  const baseClasses = 'w-full border-collapse';
  const variantClasses = {
    default: '',
    bordered: 'border border-gray-200',
    striped: ''
  };
  return __jsx("table", (0, _extends2.default)({
    ref: ref,
    className: (0, _utils.cn)(baseClasses, variantClasses[variant], className)
  }, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 19,
      columnNumber: 7
    }
  }));
});
Table.displayName = 'Table';

// Table Header

const TableHeader = exports.TableHeader = /*#__PURE__*/_react.default.forwardRef((_ref2, ref) => {
  let {
      className
    } = _ref2,
    props = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);
  return __jsx("thead", (0, _extends2.default)({
    ref: ref,
    className: (0, _utils.cn)('bg-gray-50', className)
  }, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 34,
      columnNumber: 5
    }
  }));
});
TableHeader.displayName = 'TableHeader';

// Table Body

const TableBody = exports.TableBody = /*#__PURE__*/_react.default.forwardRef((_ref3, ref) => {
  let {
      className
    } = _ref3,
    props = (0, _objectWithoutProperties2.default)(_ref3, _excluded3);
  return __jsx("tbody", (0, _extends2.default)({
    ref: ref,
    className: (0, _utils.cn)('divide-y divide-gray-200', className)
  }, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 44,
      columnNumber: 5
    }
  }));
});
TableBody.displayName = 'TableBody';

// Table Row

const TableRow = exports.TableRow = /*#__PURE__*/_react.default.forwardRef((_ref4, ref) => {
  let {
      className,
      hover = true,
      selected = false
    } = _ref4,
    props = (0, _objectWithoutProperties2.default)(_ref4, _excluded4);
  const baseClasses = 'transition-colors';
  const hoverClasses = hover ? 'hover:bg-gray-50' : '';
  const selectedClasses = selected ? 'bg-blue-50' : '';
  return __jsx("tr", (0, _extends2.default)({
    ref: ref,
    className: (0, _utils.cn)(baseClasses, hoverClasses, selectedClasses, className)
  }, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 62,
      columnNumber: 7
    }
  }));
});
TableRow.displayName = 'TableRow';

// Table Head Cell

const TableHead = exports.TableHead = /*#__PURE__*/_react.default.forwardRef((_ref5, ref) => {
  let {
      className,
      sortable = false,
      sortDirection,
      onSort,
      children
    } = _ref5,
    props = (0, _objectWithoutProperties2.default)(_ref5, _excluded5);
  const baseClasses = 'px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider';
  const sortableClasses = sortable ? 'cursor-pointer select-none' : '';
  return __jsx("th", (0, _extends2.default)({
    ref: ref,
    className: (0, _utils.cn)(baseClasses, sortableClasses, className),
    onClick: sortable ? onSort : undefined
  }, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 85,
      columnNumber: 7
    }
  }), __jsx("div", {
    className: "flex items-center gap-2",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 91,
      columnNumber: 9
    }
  }, children, sortable && __jsx("span", {
    className: "text-gray-400",
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 94,
      columnNumber: 13
    }
  }, sortDirection === 'asc' && '↑', sortDirection === 'desc' && '↓', !sortDirection && '↕')));
});
TableHead.displayName = 'TableHead';

// Table Cell

const TableCell = exports.TableCell = /*#__PURE__*/_react.default.forwardRef((_ref6, ref) => {
  let {
      className,
      align = 'left'
    } = _ref6,
    props = (0, _objectWithoutProperties2.default)(_ref6, _excluded6);
  const baseClasses = 'px-6 py-4 whitespace-nowrap text-sm text-gray-900';
  const alignClasses = {
    left: 'text-left',
    center: 'text-center',
    right: 'text-right'
  };
  return __jsx("td", (0, _extends2.default)({
    ref: ref,
    className: (0, _utils.cn)(baseClasses, alignClasses[align], className)
  }, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 122,
      columnNumber: 7
    }
  }));
});
TableCell.displayName = 'TableCell';

// Table Footer

const TableFooter = exports.TableFooter = /*#__PURE__*/_react.default.forwardRef((_ref7, ref) => {
  let {
      className
    } = _ref7,
    props = (0, _objectWithoutProperties2.default)(_ref7, _excluded7);
  return __jsx("tfoot", (0, _extends2.default)({
    ref: ref,
    className: (0, _utils.cn)('bg-gray-50', className)
  }, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 137,
      columnNumber: 5
    }
  }));
});
TableFooter.displayName = 'TableFooter';

// Table Caption

const TableCaption = exports.TableCaption = /*#__PURE__*/_react.default.forwardRef((_ref8, ref) => {
  let {
      className
    } = _ref8,
    props = (0, _objectWithoutProperties2.default)(_ref8, _excluded8);
  return __jsx("caption", (0, _extends2.default)({
    ref: ref,
    className: (0, _utils.cn)('mt-4 text-sm text-gray-500', className)
  }, props, {
    __self: void 0,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 147,
      columnNumber: 5
    }
  }));
});
TableCaption.displayName = 'TableCaption';

// 默认导出
var _default = exports.default = Table;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,