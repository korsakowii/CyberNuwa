be9b3a3068cfa01171caf34782d25202
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TabsTrigger = exports.TabsTab = exports.TabsRoot = exports.TabsPanel = exports.TabsList = exports.TabsGroup = exports.TabsContent = exports.Tabs = void 0;
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../lib/utils");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// 类型定义

// Context
const TabsContext = /*#__PURE__*/(0, _react.createContext)(undefined);
const useTabsContext = () => {
  const context = (0, _react.useContext)(TabsContext);
  if (!context) {
    throw new Error('Tabs components must be used within a Tabs component');
  }
  return context;
};

// 主组件
const Tabs = ({
  value,
  defaultValue,
  onValueChange,
  orientation = 'horizontal',
  className,
  children
}) => {
  const [internalValue, setInternalValue] = (0, _react.useState)(defaultValue || '');
  const controlledValue = value !== undefined ? value : internalValue;
  const activeTab = controlledValue || _react.default.Children.toArray(children)[0]?.props?.value || '';
  const setActiveTab = newValue => {
    if (value === undefined) {
      setInternalValue(newValue);
    }
    onValueChange?.(newValue);
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(TabsContext.Provider, {
    value: {
      activeTab,
      setActiveTab,
      orientation
    },
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: (0, _utils.cn)('w-full', className),
      children: children
    })
  });
};

// TabsList 组件
exports.Tabs = Tabs;
const TabsList = ({
  className,
  children
}) => {
  const {
    orientation
  } = useTabsContext();
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: (0, _utils.cn)('inline-flex h-10 items-center justify-center rounded-md bg-gray-100 p-1 text-gray-500', orientation === 'vertical' && 'flex-col h-auto w-40', className),
    role: "tablist",
    "aria-orientation": orientation,
    children: children
  });
};

// TabsTrigger 组件
exports.TabsList = TabsList;
const TabsTrigger = ({
  value,
  disabled = false,
  className,
  children,
  ...props
}) => {
  const {
    activeTab,
    setActiveTab,
    orientation
  } = useTabsContext();
  const isActive = activeTab === value;
  const handleKeyDown = event => {
    if (disabled) return;

    // 获取所有标签页的值
    const tabValues = [];
    const tabElements = event.currentTarget.parentElement?.querySelectorAll('[role="tab"]');
    if (tabElements) {
      tabElements.forEach(tab => {
        const tabValue = tab.getAttribute('data-value') || tab.getAttribute('value');
        if (tabValue && typeof tabValue === 'string') tabValues.push(tabValue);
      });
    }
    const currentIndex = tabValues.indexOf(value);
    let nextValue = value;
    switch (event.key) {
      case 'ArrowRight':
      case 'ArrowDown':
        event.preventDefault();
        if (currentIndex < tabValues.length - 1) {
          const nextTabValue = tabValues[currentIndex + 1];
          if (nextTabValue) nextValue = nextTabValue;
        }
        break;
      case 'ArrowLeft':
      case 'ArrowUp':
        event.preventDefault();
        if (currentIndex > 0) {
          const prevTabValue = tabValues[currentIndex - 1];
          if (prevTabValue) nextValue = prevTabValue;
        }
        break;
      case 'Enter':
      case ' ':
        event.preventDefault();
        setActiveTab(value);
        return;
    }
    if (nextValue !== value) {
      setActiveTab(nextValue);
    }
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("button", {
    className: (0, _utils.cn)('inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-white transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-400 focus-visible:ring-offset-2', isActive ? 'bg-white text-gray-950 shadow-sm' : 'text-gray-600 hover:text-gray-950', disabled && 'pointer-events-none opacity-50', orientation === 'vertical' && 'w-full justify-start', className),
    disabled: disabled,
    onClick: () => setActiveTab(value),
    onKeyDown: handleKeyDown,
    role: "tab",
    "aria-selected": isActive,
    "data-state": isActive ? 'active' : 'inactive',
    "data-value": value,
    ...props,
    children: children
  });
};

// TabsContent 组件
exports.TabsTrigger = TabsTrigger;
const TabsContent = ({
  value,
  className,
  children,
  ...props
}) => {
  const {
    activeTab
  } = useTabsContext();
  const isActive = activeTab === value;
  if (!isActive) {
    return null;
  }
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: (0, _utils.cn)('mt-2 ring-offset-white focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-400 focus-visible:ring-offset-2', className),
    role: "tabpanel",
    "data-state": isActive ? 'active' : 'inactive',
    "data-testid": `${value}-content`,
    ...props,
    children: children
  });
};

// TabsGroup 组件
exports.TabsContent = TabsContent;
const TabsGroup = ({
  label,
  className,
  children
}) => {
  const {
    orientation
  } = useTabsContext();
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: (0, _utils.cn)(orientation === 'vertical' ? 'mb-4' : 'space-y-4', className),
    children: [label && /*#__PURE__*/(0, _jsxRuntime.jsx)("h3", {
      className: "mb-2 text-sm font-medium text-gray-700",
      children: label
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      className: (0, _utils.cn)(orientation === 'horizontal' ? 'flex space-x-4 space-y-0' : 'flex flex-col space-y-4 space-x-0'),
      children: children
    })]
  });
};

// 组合组件
exports.TabsGroup = TabsGroup;
const TabsRoot = exports.TabsRoot = Tabs;
const TabsTab = exports.TabsTab = TabsTrigger;
const TabsPanel = exports.TabsPanel = TabsContent;

// 默认导出
var _default = exports.default = Tabs;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,