3202263adb016f704467e68b5aa581c2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.TableRow = exports.TableHeader = exports.TableHead = exports.TableFooter = exports.TableCell = exports.TableCaption = exports.TableBody = exports.Table = void 0;
var _react = _interopRequireDefault(require("react"));
var _utils = require("../../lib/utils");
var _jsxRuntime = require("react/jsx-runtime");
// Table 容器

const Table = exports.Table = /*#__PURE__*/_react.default.forwardRef(({
  className,
  variant = 'default',
  ...props
}, ref) => {
  const baseClasses = 'w-full border-collapse';
  const variantClasses = {
    default: '',
    bordered: 'border border-gray-200',
    striped: ''
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("table", {
    ref: ref,
    className: (0, _utils.cn)(baseClasses, variantClasses[variant], className),
    ...props
  });
});
Table.displayName = 'Table';

// Table Header

const TableHeader = exports.TableHeader = /*#__PURE__*/_react.default.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/(0, _jsxRuntime.jsx)("thead", {
  ref: ref,
  className: (0, _utils.cn)('bg-gray-50', className),
  ...props
}));
TableHeader.displayName = 'TableHeader';

// Table Body

const TableBody = exports.TableBody = /*#__PURE__*/_react.default.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/(0, _jsxRuntime.jsx)("tbody", {
  ref: ref,
  className: (0, _utils.cn)('divide-y divide-gray-200', className),
  ...props
}));
TableBody.displayName = 'TableBody';

// Table Row

const TableRow = exports.TableRow = /*#__PURE__*/_react.default.forwardRef(({
  className,
  hover = true,
  selected = false,
  ...props
}, ref) => {
  const baseClasses = 'transition-colors';
  const hoverClasses = hover ? 'hover:bg-gray-50' : '';
  const selectedClasses = selected ? 'bg-blue-50' : '';
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("tr", {
    ref: ref,
    className: (0, _utils.cn)(baseClasses, hoverClasses, selectedClasses, className),
    ...props
  });
});
TableRow.displayName = 'TableRow';

// Table Head Cell

const TableHead = exports.TableHead = /*#__PURE__*/_react.default.forwardRef(({
  className,
  sortable = false,
  sortDirection,
  onSort,
  children,
  ...props
}, ref) => {
  const baseClasses = 'px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider';
  const sortableClasses = sortable ? 'cursor-pointer select-none' : '';
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("th", {
    ref: ref,
    className: (0, _utils.cn)(baseClasses, sortableClasses, className),
    onClick: sortable ? onSort : undefined,
    ...props,
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      className: "flex items-center gap-2",
      children: [children, sortable && /*#__PURE__*/(0, _jsxRuntime.jsxs)("span", {
        className: "text-gray-400",
        children: [sortDirection === 'asc' && '↑', sortDirection === 'desc' && '↓', !sortDirection && '↕']
      })]
    })
  });
});
TableHead.displayName = 'TableHead';

// Table Cell

const TableCell = exports.TableCell = /*#__PURE__*/_react.default.forwardRef(({
  className,
  align = 'left',
  ...props
}, ref) => {
  const baseClasses = 'px-6 py-4 whitespace-nowrap text-sm text-gray-900';
  const alignClasses = {
    left: 'text-left',
    center: 'text-center',
    right: 'text-right'
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("td", {
    ref: ref,
    className: (0, _utils.cn)(baseClasses, alignClasses[align], className),
    ...props
  });
});
TableCell.displayName = 'TableCell';

// Table Footer

const TableFooter = exports.TableFooter = /*#__PURE__*/_react.default.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/(0, _jsxRuntime.jsx)("tfoot", {
  ref: ref,
  className: (0, _utils.cn)('bg-gray-50', className),
  ...props
}));
TableFooter.displayName = 'TableFooter';

// Table Caption

const TableCaption = exports.TableCaption = /*#__PURE__*/_react.default.forwardRef(({
  className,
  ...props
}, ref) => /*#__PURE__*/(0, _jsxRuntime.jsx)("caption", {
  ref: ref,
  className: (0, _utils.cn)('mt-4 text-sm text-gray-500', className),
  ...props
}));
TableCaption.displayName = 'TableCaption';

// 默认导出
var _default = exports.default = Table;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,