4441a6bb6441cde276467c6938fc67ce
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DropdownButton = exports.Dropdown = void 0;
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../lib/utils");
var _button = require("./button");
var _jsxRuntime = require("react/jsx-runtime");
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
// 下拉选项接口

// 下拉组件属性

// 下拉菜单组件
const Dropdown = ({
  trigger,
  options,
  onSelect,
  className,
  placement = 'bottom',
  align = 'start',
  width = 'auto',
  disabled = false,
  searchable = false,
  placeholder = '搜索...',
  maxHeight = '300px'
}) => {
  const [isOpen, setIsOpen] = (0, _react.useState)(false);
  const [searchTerm, setSearchTerm] = (0, _react.useState)('');
  const [selectedOption, setSelectedOption] = (0, _react.useState)(null);
  const dropdownRef = (0, _react.useRef)(null);
  const triggerRef = (0, _react.useRef)(null);

  // 过滤选项
  const filteredOptions = searchable ? options.filter(option => !option.divider && option.label && option.label.toLowerCase().includes(searchTerm.toLowerCase())) : options;

  // 处理点击外部关闭
  (0, _react.useEffect)(() => {
    const handleClickOutside = event => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target) && triggerRef.current && !triggerRef.current.contains(event.target)) {
        setIsOpen(false);
        setSearchTerm('');
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // 处理选项选择
  const handleOptionSelect = option => {
    if (option.disabled || option.divider) return;
    setSelectedOption(option);
    onSelect?.(option);
    setIsOpen(false);
    setSearchTerm('');
  };

  // 获取位置类名
  const getPlacementClasses = () => {
    const baseClasses = 'absolute z-50';
    switch (placement) {
      case 'top':
        return (0, _utils.cn)(baseClasses, 'bottom-full mb-2');
      case 'bottom':
        return (0, _utils.cn)(baseClasses, 'top-full mt-2');
      case 'left':
        return (0, _utils.cn)(baseClasses, 'right-full mr-2');
      case 'right':
        return (0, _utils.cn)(baseClasses, 'left-full ml-2');
      default:
        return (0, _utils.cn)(baseClasses, 'top-full mt-2');
    }
  };

  // 获取对齐类名
  const getAlignClasses = () => {
    switch (align) {
      case 'start':
        return 'left-0';
      case 'center':
        return 'left-1/2 transform -translate-x-1/2';
      case 'end':
        return 'right-0';
      default:
        return 'left-0';
    }
  };

  // 获取宽度类名
  const getWidthClasses = () => {
    switch (width) {
      case 'sm':
        return 'w-32';
      case 'md':
        return 'w-56';
      case 'lg':
        return 'w-64';
      case 'xl':
        return 'w-80';
      default:
        return 'w-56';
    }
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
    className: (0, _utils.cn)('relative inline-block', className),
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
      ref: triggerRef,
      onClick: () => !disabled && setIsOpen(!isOpen),
      className: (0, _utils.cn)('cursor-pointer', disabled && 'cursor-not-allowed opacity-50'),
      children: trigger
    }), isOpen && /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
      ref: dropdownRef,
      className: (0, _utils.cn)(getPlacementClasses(), getAlignClasses(), getWidthClasses(), 'bg-white border border-gray-200 rounded-md shadow-lg'),
      children: [searchable && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "p-3 border-b border-gray-100",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("input", {
          type: "text",
          placeholder: placeholder,
          value: searchTerm,
          onChange: e => setSearchTerm(e.target.value),
          className: "w-full px-3 py-2 text-sm border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent",
          autoFocus: true
        })
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "overflow-y-auto",
        style: {
          maxHeight
        },
        children: filteredOptions.map((option, index) => /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
          children: option.divider ? /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
            className: "h-px bg-gray-200 my-1"
          }) : /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", {
            onClick: () => handleOptionSelect(option),
            className: (0, _utils.cn)('flex items-center gap-3 px-4 py-3 text-sm cursor-pointer transition-colors', option.disabled ? 'text-gray-400 cursor-not-allowed' : 'text-gray-700 hover:bg-gray-100', selectedOption?.value === option.value && 'bg-blue-50 text-blue-700'),
            children: [option.icon && /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              className: "flex-shrink-0",
              children: option.icon
            }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
              className: "flex-1",
              children: option.label
            })]
          })
        }, option.value || index))
      }), searchable && filteredOptions.length === 0 && /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
        className: "px-4 py-3 text-sm text-gray-500 text-center",
        children: "\u65E0\u641C\u7D22\u7ED3\u679C"
      })]
    })]
  });
};

// 下拉按钮组件
exports.Dropdown = Dropdown;
const DropdownButton = ({
  label,
  variant = 'primary',
  size = 'md',
  icon,
  ...dropdownProps
}) => {
  const [isOpen, setIsOpen] = (0, _react.useState)(false);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Dropdown, {
    ...dropdownProps,
    trigger: /*#__PURE__*/(0, _jsxRuntime.jsxs)(_button.Button, {
      variant: variant,
      size: size,
      onClick: () => setIsOpen(!isOpen),
      className: "flex items-center gap-2",
      children: [icon, label, /*#__PURE__*/(0, _jsxRuntime.jsx)("svg", {
        className: (0, _utils.cn)('w-4 h-4 transition-transform', isOpen && 'rotate-180'),
        fill: "none",
        stroke: "currentColor",
        viewBox: "0 0 24 24",
        children: /*#__PURE__*/(0, _jsxRuntime.jsx)("path", {
          strokeLinecap: "round",
          strokeLinejoin: "round",
          strokeWidth: 2,
          d: "M19 9l-7 7-7-7"
        })
      })]
    })
  });
};

// 默认导出
exports.DropdownButton = DropdownButton;
var _default = exports.default = Dropdown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,